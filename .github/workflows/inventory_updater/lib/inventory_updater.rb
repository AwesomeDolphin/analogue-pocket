# frozen_string_literal: true

require 'yaml'

require_relative 'inventory_updater/analogue/pocket_service'
require_relative 'inventory_updater/github/github_service'
require_relative 'inventory_updater/repository_parser'
require_relative 'inventory_updater/repository_service'

class InventoryUpdater
  ASSETS_DIRECTORY = 'assets'
  AUTHORS_DIRECTORY = 'authors'
  DATA_DIRECTORY = '_data'
  IMAGES_DIRECTORY = 'images'
  PLATFORMS_DIRECTORY = 'platforms'

  REPOSITORIES_FILE = 'repositories.yml'
  CORES_FILE = 'cores.yml'

  HEADER = <<~TXT
    # ##############################################################################
    # #                                                                            #
    # #                        THIS FILE IS AUTO-GENERATED                         #
    # #                           DO NOT EDIT THIS FILE                            #
    # #               ADD NEW CORE REPOSITORIES TO REPOSISTORIES.YML               #
    # #                                                                            #
    # ##############################################################################
  TXT

  attr_reader :github_service, :repository_service

  def initialize
    @github_service = GitHub::GitHubService.new
    @repository_service = RepositoryService.new
  end

  def update_cores
    puts 'Updating Analogue Pocket cores'

    owner_cores = []

    # Parse the repositories and group them by owner
    owner_repositories = get_repositories.group_by { |repository| repository.owner }

    # Process the repositories
    owner_repositories.each do |owner, repositories|
      cores = []
      repositories.each do |repository|
        repository_cores = process_repository(repository)
        cores.concat(repository_cores)
      end

      owner_cores << { "username" => owner, "cores" => cores }
    end

    # Update the cores.yml file
    cores_path = File.join(DATA_DIRECTORY, CORES_FILE)
    File.open(cores_path, "wb") do |file|
      file << HEADER
      file << owner_cores.to_yaml
    end

    puts 'Completed updating Analogue Pocket cores'
  end

  private

  def get_repositories
    repositories_path = File.join(DATA_DIRECTORY, REPOSITORIES_FILE)
    return RepositoryParser.parse(repositories_path)
  end

  def process_repository(repository)
    puts "Processing repository: #{repository.display_name}"
    # Download / extract the core to temporary folder
    root_path = @repository_service.download_core(repository)

    serialized_cores = []

    begin
      download_url = @repository_service.get_download_url(repository)

      github_repository = repository.github_repository
      funding = @github_service.get_funding(github_repository)
      latest_release = @github_service.get_latest_release(github_repository, repository.prerelease)

      # Initialize the service responsible for interacting with the core folder
      pocket_service = Analogue::PocketService.new(root_path)

      # Process the individual cores
      cores = pocket_service.get_cores
      cores.each do |core|
        core_id = core.id
        platform_id = core.platform_id
        platform = pocket_service.get_platform(platform_id)

        # Update the author icon
        update_icon(pocket_service, core_id)

        # Update the platform image
        update_image(pocket_service, platform_id)

        serialized_cores << serialize_core(repository, core, platform, download_url, latest_release, funding)
      end
    ensure
      # Delete the temporary directory
      FileUtils.remove_entry root_path
    end

    return serialized_cores
  end

  def update_image(pocket_service, platform_id)
    image_file = "#{platform_id}.png"
    image_path = File.join(ASSETS_DIRECTORY, IMAGES_DIRECTORY, PLATFORMS_DIRECTORY, image_file)

    pocket_service.export_image(platform_id, image_path)
  end

  def update_icon(pocket_service, core_id)
    image_file = "#{core_id}.png"
    image_path = File.join(ASSETS_DIRECTORY, IMAGES_DIRECTORY, AUTHORS_DIRECTORY, image_file)

    pocket_service.export_icon(core_id, image_path)
  end

  def serialize_core(repository, core, platform, download_url, latest_release, funding)
    data_slots = core.data.data_slots.select {|data_slot| data_slot.required}
    assets = data_slots.map do |data_slot|
      { "platform" => core.platform_id }.tap do |asset|
        asset["filename"] = data_slot.filename if data_slot.filename
        asset["extensions"] = data_slot.extensions if data_slot.extensions
        asset["core_specific"] = data_slot.configuration.core_sepecific_file if data_slot.configuration.core_sepecific_file
      end
    end

    core_repository = {
      "name" => repository.name,
      "prerelease" => repository.prerelease
    }.tap do |repo|
      repo["tag_name"] = latest_release.tag_name if !latest_release.nil?
    end

    hash = {
      "repository" => core_repository,
      "id" => core.id,
      "display_name" => repository.display_name,
      "date_release" => core.date_release,
      "download_url" => download_url,
      "version" => core.version,
      "platform" => {
        "id" => core.platform_id,
        "category" => platform.category,
        "name" => platform.name,
        "manufacturer" => platform.manufacturer,
        "year" => platform.year
      },
      "assets" => assets
    }

    if !funding.nil?
      sponsor = {}.tap do |sponsor|
        sponsor["community_bridge"] = funding.community_bridge if funding.community_bridge
        sponsor["github"] = funding.github if funding.github
        sponsor["issuehunt"] = funding.issuehunt if funding.issuehunt
        sponsor["ko_fi"] = funding.ko_fi if funding.ko_fi
        sponsor["liberapay"] = funding.liberapay if funding.liberapay
        sponsor["open_collective"] = funding.open_collective if funding.open_collective
        sponsor["otechie"] = funding.otechie if funding.otechie
        sponsor["patreon"] = funding.patreon if funding.patreon
        sponsor["tidelift"] = funding.tidelift if funding.tidelift
        sponsor["custom"] = funding.custom if funding.custom
      end

      hash["sponsor"] = sponsor
    end

    return hash
  end
end

if __FILE__ == $0
  inventory_updater = InventoryUpdater.new
  inventory_updater.update_cores
end
